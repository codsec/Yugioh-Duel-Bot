environment:

  matrix:
    - PYTHON: "C:\\Python35-x64"
    - PYTHON: "C:\\Python36-x64"
init:
  # Set "build version number" to "short-commit-hash" or when tagged to "tag name" (Travis style)
  - ps: >-
      if ($env:APPVEYOR_REPO_TAG -eq "true")
      {
          Update-AppveyorBuild -Version "$($env:APPVEYOR_REPO_TAG_NAME.TrimStart("v"))"
      }
      else
      {
          Update-AppveyorBuild -Version "dev-$($env:APPVEYOR_REPO_COMMIT.Substring(0, 7))"
      }
install:
  # We need wheel installed to build wheels
  - "%PYTHON%\\python.exe -m pip install -r requirements.txt"
  - "%PYTHON%\\python.exe -m pip install pypandoc"
  - "%PYTHON%\\python.exe -m pip install pyinstaller"

build_script:
  - "%PYTHON%\\Scripts\\pyinstaller.exe main.spec"
  - "%PYTHON%\\python.exe fix_build.py"

after_build:
  - 7z a dlbot.zip dist\dlbot\*
test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  - "rem"

after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
  - "%PYTHON%\\python.exe setup.py sdist"
  - "%PYTHON%\\python.exe setup.py bdist_wheel"

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dlbot.zip
    name: botexe

  - path: dist\*
    name: wheels

deploy:
  release: DLBOT-v$(appveyor_build_version)
  description: 'DLBOT release; Dont forget to run dlbot.exe setup.'
  provider: GitHub
  auth_token:
    secure: bXsbrwh3sAaJTLKxuYVrwDWgwhd5d2zCTtxAhT4/sLeG6iVFhvv6RqkYcSx9zfQ8 # your encrypted token from GitHub
  artifact: dlbot.zip            # upload all NuGet packages to release assets
  draft: false
  prerelease: false
  on:
    branch: master               # release from master branch only
    #appveyor_repo_tag: true        # deploy on tag push only
#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.